// /app/api/proscons/route.ts

import { NextRequest, NextResponse } from "next/server";
import { MongoClient, ObjectId } from "mongodb";

const uri = process.env.MONGODB_URI!;
const dbName = "fairDistribution";
const collectionName = "proscons";

let cachedClient: MongoClient | null = null;

async function getClient() {
  if (!cachedClient) {
    cachedClient = new MongoClient(uri);
    await cachedClient.connect();
  }
  return cachedClient;
}

export async function GET() {
  const client = await getClient();
  const db = client.db(dbName);
  const collection = db.collection(collectionName);

  const data = await collection.find({}).toArray();
  return NextResponse.json({ prosCons: data });
}

export async function POST(req: NextRequest) {
  try {
    const { type, text } = await req.json();
    if (!text || !["pro", "con"].includes(type)) {
      return NextResponse.json({ error: "Invalid input" }, { status: 400 });
    }

    const client = await getClient();
    const db = client.db(dbName);
    const collection = db.collection(collectionName);

    const result = await collection.insertOne({ type, text });
    return NextResponse.json({ insertedId: result.insertedId });
  } catch (err) {
    console.error("POST error:", err);
    return NextResponse.json({ error: "Server error" }, { status: 500 });
  }
}

export async function DELETE(req: NextRequest) {
  try {
    const { id } = await req.json();
    if (!id) return NextResponse.json({ error: "ID required" }, { status: 400 });

    const client = await getClient();
    const db = client.db(dbName);
    const collection = db.collection(collectionName);

    await collection.deleteOne({ _id: new ObjectId(id) });
    return NextResponse.json({ success: true });
  } catch (err) {
    console.error("DELETE error:", err);
    return NextResponse.json({ error: "Server error" }, { status: 500 });
  }
}
